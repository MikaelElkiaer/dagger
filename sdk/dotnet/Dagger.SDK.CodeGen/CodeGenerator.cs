using System.Text;
using CodegenCS;
using Dagger.SDK.CodeGen.Models;

namespace Dagger.SDK.CodeGen;

public class CodeGenerator
{
    private readonly string className = "Dagger";
    private readonly string classNamespace = "Dagger.SDK.Client";
    private readonly ICodegenContext context;

    public CodeGenerator(ICodegenContext context, QuerySchema model)
    {
        if (string.IsNullOrEmpty(context.DefaultOutputFile.RelativePath))
            context.DefaultOutputFile.RelativePath = $"{className}.generated.cs";

        // Allow the following types to be injected into delegates
        context.DependencyContainer.RegisterSingleton(this);
        context.DependencyContainer.RegisterSingleton(model);

        this.context = context;
    }

    public void Template()
    {
        context.DefaultOutputFile.Write($$"""
            // <auto-generated/>

            using System = global::System;

            namespace {{classNamespace}};

            {{Gen.Class}}

            {{Gen.ContainerClass}}
            """);
    }

    internal static class Gen
    {

        internal static Func<ICodegenContext, CodeGenerator, QuerySchema, FormattableString> Class = (ctx, template, model) => $$"""
            public partial class {{template.className}}
            {

            }
            """;

        internal static Func<ICodegenContext, CodeGenerator, QuerySchema, FormattableString> ContainerClass = (ctx, template, model) => $$"""
            public class Container
            {
                {{ContainerMethods(ctx, template, model)}}
            }
            """;

        static IEnumerable<FormattableString> ContainerMethods(ICodegenContext ctx, CodeGenerator template, QuerySchema model)
        {
            var fields = model.Types?.First(t => string.Equals(t.Name, "container", StringComparison.InvariantCultureIgnoreCase)).Fields;
            foreach (var f in fields!)
                yield return $$"""
                    public Container {{PascalCase(f.Name!)}}() => throw new NotImplemented();
                    """;
        }

        static string PascalCase(string input) => input.Substring(0, 1).ToUpper() + input.Substring(1);
    }
}
